import React, { useState, useEffect } from 'react';
import { Form, Formik, FormikValues } from 'formik';
import { useAxiosPost } from 'hook/useAxios';
import { MovieDataSchema } from 'components/validationSchema';
import Basic from './Step.tsx/Basic';
import Actor from './Step.tsx/Actor';
import Director from './Step.tsx/Director';
import Genre from './Step.tsx/Genre';

export type MovieValues = {
  title: string;
  release_year: number;
  rating: number;
  plot: string;
  duration: number;
  genres: {
    value: string;
    label: string;
  }[];
  actorName: string;
  actorNationality: string;
  actorBirthDate: number | string;
  actorBio: string;
  directorName: string;
  directorNationality: string;
  directorBirthDate: number | string;
  directorBio: string;
  images: { image_url: string }[];
};

const MovieForm = () => {
  const [step, setStep] = useState(1);
  const [MoviePostApi] = useAxiosPost();

  useEffect(() => {
    // Fetch genres, actors, and directors from the backend
    MovieDataSchema();
  }, []);

  const initialValues: MovieValues = {
    title: '',
    release_year: new Date().getFullYear(),
    rating: 0,
    plot: '',
    duration: 0,
    genres: [],
    actorName: '',
    actorNationality: '',
    actorBirthDate: '',
    actorBio: '',
    directorName: '',
    directorNationality: '',
    directorBirthDate: '',
    directorBio: '',
    images: [],
  };

  const onSubmit = async (values: FormikValues) => {
    if (step !== 5) {
      setStep(step + 1);
    } else {
      const movieData = {
        Movie: {
          title: values.title,
          release_year: values.release_year,
          rating: values.rating,
          duration: values.duration,
          plot: values.plot,
        },
        Genre: values.genres.map((t: { value: string; label: string }) => t.value),
        Actor: {
          name: values.actorName,
          nationality: values.actorNationality,
          birth_date: values.actorBirthDate,
          bio: values.actorBio,
        },
        Director: {
          name: values.directorName,
          nationality: values.directorNationality,
          birth_date: values.directorBirthDate,
          bio: values.directorBio,
        },
        Image: values.images.map((img: { image_url: string }) => img.image_url),
      };

      try {
        const { data, error } = await MoviePostApi('/movies', movieData);
        if (error) {
          console.error('Error creating movie:', error);
        } else {
          alert('Movie created successfully');
        }
      } catch (error) {
        console.error('Error creating movie:', error);
      }
    }
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>, setFieldValue: any) => {
    const files = Array.from(event.target.files || []).map((file) => ({
      image_url: URL.createObjectURL(file),
    }));
    setFieldValue('images', files);
  };

  return (
    <>
      <h1 className="text-white text-3xl m-2 text-center">Add Movie</h1>
      <div className="container mx-auto w-4/5 flex justify-center h-[800px]">
        <Formik
          initialValues={initialValues}
          validationSchema={MovieDataSchema[step - 1]}
          onSubmit={(values) => onSubmit(values)}
        >
          {({ values, setFieldValue }) => (
            <Form>
              {step === 1 && (
                <Basic
                  title={values.title}
                  release_year={values.release_year}
                  rating={values.rating}
                  duration={values.duration}
                />
              )}
              {step === 2 && <Genre />}
              {step === 3 && (
                <Actor
                  actorName={values.actorName}
                  actorNationality={values.actorNationality}
                  actorBirthDate={values.actorBirthDate}
                  actorBio={values.actorBio}
                />
              )}
              {step === 4 && (
                <Director
                  name={values.directorName}
                  nationality={values.directorNationality}
                  birth_date={values.directorBirthDate}
                  bio={values.directorBio}
                />
              )}
              {step === 5 && (
                <>
                  <h2 className="text-white text-xl m-2 text-center">Step 5: Upload Images</h2>
                  <input
                    type="file"
                    className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                    multiple
                    onChange={(event) => handleFileChange(event, setFieldValue)}
                  />
                </>
              )}
              {step !== 1 && (
                <button
                  type="button"
                  className="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700"
                  onClick={() => setStep(step - 1)}
                >
                  Back
                </button>
              )}
              <button
                type="submit"
                className="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700"
              >
                {step !== 5 ? 'Next' : 'Submit'}
              </button>
            </Form>
          )}
        </Formik>
      </div>
    </>
  );
};

export default MovieForm;
