import React from 'react';
import { useFormContext, Controller } from 'react-hook-form';

const BasicDetails: React.FC = () => {
  const { control } = useFormContext();

  return (
    <div>
      <Controller
        name="fullName"
        control={control}
        render={({ field, fieldState: { error } }) => (
          <div>
            <input {...field} placeholder="Full Name" />
            {error && <span>{error.message}</span>}
          </div>
        )}
      />
      <Controller
        name="email"
        control={control}
        render={({ field, fieldState: { error } }) => (
          <div>
            <input {...field} placeholder="Email" />
            {error && <span>{error.message}</span>}
          </div>
        )}
      />
      {/* Add other fields similarly */}
    </div>
  );
};

export default BasicDetails;

import React from 'react';
import { useFormContext, Controller } from 'react-hook-form';

const Education: React.FC = () => {
  const { control, watch, setValue } = useFormContext();
  const education = watch('education');

  return (
    <div>
      {education.map((_, index) => (
        <div key={index}>
          <Controller
            name={`education[${index}].qualification`}
            control={control}
            render={({ field, fieldState: { error } }) => (
              <div>
                <input {...field} placeholder="Qualification" />
                {error && <span>{error.message}</span>}
              </div>
            )}
          />
          <Controller
            name={`education[${index}].university`}
            control={control}
            render={({ field, fieldState: { error } }) => (
              <div>
                <input {...field} placeholder="University" />
                {error && <span>{error.message}</span>}
              </div>
            )}
          />
          <Controller
            name={`education[${index}].graduationYear`}
            control={control}
            render={({ field, fieldState: { error } }) => (
              <div>
                <input {...field} placeholder="Graduation Year" type="number" />
                {error && <span>{error.message}</span>}
              </div>
            )}
          />
          <Controller
            name={`education[${index}].percentage`}
            control={control}
            render={({ field, fieldState: { error } }) => (
              <div>
                <input {...field} placeholder="Percentage" type="number" />
                {error && <span>{error.message}</span>}
              </div>
            )}
          />
        </div>
      ))}
    </div>
  );
};

export default Education;

import React from 'react';
import { useFormContext, Controller } from 'react-hook-form';

const Experience: React.FC = () => {
  const { control, watch, setValue } = useFormContext();
  const experience = watch('experience');

  return (
    <div>
      {experience.map((_, index) => (
        <div key={index}>
          <Controller
            name={`experience[${index}].jobTitle`}
            control={control}
            render={({ field, fieldState: { error } }) => (
              <div>
                <input {...field} placeholder="Job Title" />
                {error && <span>{error.message}</span>}
              </div>
            )}
          />
          <Controller
            name={`experience[${index}].employer`}
            control={control}
            render={({ field, fieldState: { error } }) => (
              <div>
                <input {...field} placeholder="Employer" />
                {error && <span>{error.message}</span>}
              </div>
            )}
          />
          <Controller
            name={`experience[${index}].years`}
            control={control}
            render={({ field, fieldState: { error } }) => (
              <div>
                <input {...field} placeholder="Years of Experience" type="number" />
                {error && <span>{error.message}</span>}
              </div>
            )}
          />
        </div>
      ))}
    </div>
  );
};

export default Experience;


import React from 'react';
import { useFormContext, Controller } from 'react-hook-form';

const LanguageSection = () => {
  const { control, watch, setValue } = useFormContext();
  const languages = watch('languages');

  return (
    <div>
      <h2>Languages</h2>
      {languages.map((_, index) => (
        <div key={index}>
          <Controller
            name={`languages[${index}].language`}
            control={control}
            render={({ field }) => (
              <input type="text" {...field} placeholder="Language" />
            )}
          />
          <label>
            <input
              type="checkbox"
              checked={languages[index].read}
              onChange={() => {
                setValue(`languages[${index}].read`, !languages[index].read);
                if (!languages[index].read) {
                  setValue(`languages[${index}].language`, ''); // Ensure language is filled if any checkbox is checked
                }
              }}
            />
            Read
          </label>
          <label>
            <input
              type="checkbox"
              checked={languages[index].write}
              onChange={() => {
                setValue(`languages[${index}].write`, !languages[index].write);
                if (!languages[index].write) {
                  setValue(`languages[${index}].language`, ''); // Ensure language is filled if any checkbox is checked
                }
              }}
            />
            Write
          </label>
          <label>
            <input
              type="checkbox"
              checked={languages[index].speak}
              onChange={() => {
                setValue(`languages[${index}].speak`, !languages[index].speak);
                if (!languages[index].speak) {
                  setValue(`languages[${index}].language`, ''); // Ensure language is filled if any checkbox is checked
                }
              }}
            />
            Speak
          </label>
        </div>
      ))}
    </div>
  );
};

export default LanguageSection;


import React from 'react';
import { useFormContext, Controller } from 'react-hook-form';

const ReferenceContact = () => {
  const { control } = useFormContext();

  return (
    <div>
      <h2>Reference Contact</h2>
      <Controller
        name="referenceName"
        control={control}
        render={({ field }) => <input type="text" {...field} placeholder="Reference Name" />}
      />
      <Controller
        name="referenceEmail"
        control={control}
        render={({ field }) => <input type="email" {...field} placeholder="Reference Email" />}
      />
      <Controller
        name="referencePhoneNumber"
        control={control}
        render={({ field }) => <input type="text" {...field} placeholder="Reference Phone Number" />}
      />
      <Controller
        name="relationship"
        control={control}
        render={({ field }) => <input type="text" {...field} placeholder="Relationship" />}
      />
    </div>
  );
};

export default ReferenceContact;


import React from 'react';
import { useFormContext, Controller } from 'react-hook-form';

const Preferences = () => {
  const { control } = useFormContext();

  return (
    <div>
      <h2>Preferences</h2>
      <Controller
        name="preferredLocation"
        control={control}
        render={({ field }) => <input type="text" {...field} placeholder="Preferred Location" />}
      />
      <Controller
        name="expectedSalary"
        control={control}
        render={({ field }) => <input type="number" {...field} placeholder="Expected Salary" />}
      />
      <Controller
        name="noticePeriod"
        control={control}
        render={({ field }) => <input type="text" {...field} placeholder="Notice Period" />}
      />
    </div>
  );
};

export default Preferences;


import React, { useState } from 'react';
import { useForm, FormProvider } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import BasicDetails from './BasicDetails';
import Education from './Education';
import Experience from './Experience';
import Language from './Language';
import Technology from './Technology';
import ReferenceContact from './ReferenceContact';
import Preferences from './Preferences';
import { basicDetailsSchema, educationSchema, experienceSchema, languageSchema, technologySchema, referenceContactSchema, preferencesSchema } from './validationSchemas';

const steps = [
  { label: 'Basic Details', component: BasicDetails, schema: basicDetailsSchema },
  { label: 'Education', component: Education, schema: educationSchema },
  { label: 'Experience', component: Experience, schema: experienceSchema },
  { label: 'Language', component: Language, schema: languageSchema },
  { label: 'Technology', component: Technology, schema: technologySchema },
  { label: 'Reference Contact', component: ReferenceContact, schema: referenceContactSchema },
  { label: 'Preferences', component: Preferences, schema: preferencesSchema },
];

const App = () => {
  const [step, setStep] = useState(0);

  const currentStep = steps[step];

  const methods = useForm({
    resolver: yupResolver(currentStep.schema),
    defaultValues: {
      fullName: '',
      email: '',
      phoneNumber: '',
      dateOfBirth: '',
      education: [{ qualification: '', university: '', graduationYear: '', percentage: '' }],
      experience: [{ jobTitle: '', employer: '', years: '' }],
      languages: [{ language: '', read: false, write: false, speak: false }],
      technologies: [{ technology: '', experienceLevel: '' }],
      referenceName: '',
      referenceEmail: '',
      referencePhoneNumber: '',
      relationship: '',
      preferredLocation: '',
      expectedSalary: '',
      noticePeriod: '',
    },
    mode: 'onBlur',
  });

  const onSubmit = async (data) => {
    if (step < steps.length - 1) {
      setStep((prev) => prev + 1);
    } else {
      console.log('Form data:', data);
    }
  };

  const onBack = () => {
    if (step > 0) {
      setStep((prev) => prev - 1);
    }
  };

  return (
    <FormProvider {...methods}>
      <form onSubmit={methods.handleSubmit(onSubmit)}>
        <h1>{currentStep.label}</h1>
        <currentStep.component />
        <div>
          {step > 0 && <button type="button" onClick={onBack}>Back</button>}
          <button type="submit">{step < steps.length - 1 ? 'Next' : 'Submit'}</button>
        </div>
      </form>
    </FormProvider>
  );
};

export default App;




-------------------------------------------------------------------------------------------------


import React, { useState } from 'react';
import { useForm, FormProvider } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import BasicDetails from './BasicDetails';
import Education from './Education';
import Experience from './Experience';
import Language from './Language';
import Technology from './Technology';
import ReferenceContact from './ReferenceContact';
import Preferences from './Preferences';

// Define validation schema
const validationSchema = yup.object().shape({
  fullName: yup.string().required('Full Name is required'),
  email: yup.string().email('Invalid email').required('Email is required'),
  phoneNumber: yup.string().required('Phone Number is required').matches(/^[0-9]{10}$/, 'Phone Number must be exactly 10 digits'),
  dateOfBirth: yup.date().required('Date of Birth is required'),
  education: yup.array().of(
    yup.object().shape({
      qualification: yup.string().required('Qualification is required'),
      university: yup.string().required('University is required'),
      graduationYear: yup.number().required('Graduation Year is required').min(1900, 'Year must be after 1900').max(new Date().getFullYear(), `Year can't be in the future`),
      percentage: yup.number().required('Percentage is required').min(0, 'Percentage cannot be negative').max(100, 'Percentage cannot exceed 100'),
    })
  ),
  experience: yup.array().of(
    yup.object().shape({
      jobTitle: yup.string().required('Job Title is required'),
      employer: yup.string().required('Employer is required'),
      years: yup.number().required('Years of Experience is required').min(0, 'Years of Experience cannot be negative'),
    })
  ),
  languages: yup.array().of(
    yup.object().shape({
      language: yup.string().required('Language is required'),
      read: yup.boolean(),
      write: yup.boolean(),
      speak: yup.boolean(),
    })).test('isSelected', 'At least one language must be selected', value => 
    value.some(v => v.read || v.write || v.speak)
  ),
  technologies: yup.array().of(
    yup.object().shape({
      technology: yup.string().required('Technology is required'),
      experienceLevel: yup.string().when('technology', {
        is: val => val && val.length > 0,
        then: schema => schema.required('Experience Level is required if Technology is selected'),
      }),
    })).test('isSelected', 'At least one technology must be selected', value => 
    value.some(v => v.technology && v.experienceLevel)
  ),
  referenceName: yup.string().required('Reference Name is required'),
  referenceEmail: yup.string().email('Invalid email').required('Reference Email is required'),
  referencePhoneNumber: yup.string().required('Reference Phone Number is required').matches(/^[0-9]{10}$/, 'Reference Phone Number must be exactly 10 digits'),
  relationship: yup.string().required('Relationship is required'),
  preferredLocation: yup.string().required('Preferred Location is required'),
  expectedSalary: yup.number().required('Expected Salary is required').min(0, 'Salary cannot be negative'),
  noticePeriod: yup.string().required('Notice Period is required'),
});

const App = () => {
  const methods = useForm({
    resolver: yupResolver(validationSchema),
    defaultValues: {
      fullName: '',
      email: '',
      phoneNumber: '',
      dateOfBirth: '',
      education: [{ qualification: '', university: '', graduationYear: '', percentage: '' }],
      experience: [{ jobTitle: '', employer: '', years: '' }],
      languages: [{ language: '', read: false, write: false, speak: false }],
      technologies: [{ technology: '', experienceLevel: '' }],
      referenceName: '',
      referenceEmail: '',
      referencePhoneNumber: '',
      relationship: '',
      preferredLocation: '',
      expectedSalary: '',
      noticePeriod: '',
    },
  });

  const [currentStep, setCurrentStep] = useState(0);
  const steps = [
    BasicDetails,
    Education,
    Experience,
    Language,
    Technology,
    ReferenceContact,
    Preferences,
  ];

  const onSubmit = (data) => {
    // Handle form submission
    console.log(data);
  };

  const nextStep = () => setCurrentStep((prev) => prev + 1);
  const prevStep = () => setCurrentStep((prev) => prev - 1);

  const StepComponent = steps[currentStep];

  return (
    <FormProvider {...methods}>
      <form onSubmit={methods.handleSubmit(onSubmit)}>
        <StepComponent />
        <button type="button" disabled={currentStep === 0} onClick={prevStep}>
          Previous
        </button>
        <button type="button" disabled={currentStep === steps.length - 1} onClick={nextStep}>
          Next
        </button>
        {currentStep === steps.length - 1 && <button type="submit">Submit</button>}
      </form>
    </FormProvider>
  );
};

export default App;
