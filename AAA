import React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';
import { DataTable } from 'primereact/datatable';
import { Column } from 'primereact/column';
import { useDispatch, useSelector } from 'react-redux';
import { InputText } from 'primereact/inputtext';
import { useDebounce } from 'use-debounce'; // Assuming a debounce library for debouncing input
import { ScrollTop } from 'primereact/scrolltop';

const TableInfiniteScroll = forwardRef((props, ref) => {
    const dispatch = useDispatch();
    const { setSelectionList, columnData, rowDataLimit, getData, ...otherProps } = props;

    const [rows, setRows] = useState([]);
    const [loading, setLoading] = useState(false);
    const [first, setFirst] = useState(0);
    const [totalRecords, setTotalRecords] = useState(0);
    const [selectedRows, setSelectedRows] = useState([]);
    const [filters, setFilters] = useState({});
    const [sortField, setSortField] = useState(null);
    const [sortOrder, setSortOrder] = useState(null);
    const [searchQuery, setSearchQuery] = useState('');
    const [debouncedSearchQuery] = useDebounce(searchQuery, 300); // Debounce the search query

    const onLazyLoad = async (event) => {
        setLoading(true);
        const params = {
            startRow: event.first,
            endRow: event.first + event.rows,
            sortModel: event.sortField ? [{ colId: event.sortField, sort: event.sortOrder === 1 ? 'asc' : 'desc' }] : [],
            filterModel: filters,
            query: debouncedSearchQuery
        };
        
        const { rowData, rowCount } = await getData(params);
        setRows(event.first === 0 ? rowData : [...rows, ...rowData]);
        setTotalRecords(rowCount);
        setFirst(event.first);
        setLoading(false);
    };

    const onSelectionChange = (e) => {
        setSelectedRows(e.value);
        setSelectionList(e.value);
    };

    const onSort = (e) => {
        setSortField(e.sortField);
        setSortOrder(e.sortOrder);
    };

    const onFilter = (e) => {
        setFilters(e.filters);
    };

    const onSearchChange = (e) => {
        setSearchQuery(e.target.value);
    };

    useImperativeHandle(ref, () => ({
        refreshData: () => {
            setFirst(0);
            onLazyLoad({ first: 0, rows: rowDataLimit });
        },
        getSelectedRows: () => selectedRows,
        onChange: (value) => {
            setSearchQuery(value);
        }
    }));

    useEffect(() => {
        onLazyLoad({ first: 0, rows: rowDataLimit });
    }, [debouncedSearchQuery, filters, sortField, sortOrder]);

    return (
        <div className="datatable-infinite-scroll">
            <div className="p-inputgroup">
                <InputText value={searchQuery} onChange={onSearchChange} placeholder="Search..." />
            </div>
            <DataTable
                value={rows}
                lazy
                paginator
                scrollable
                rows={rowDataLimit}
                totalRecords={totalRecords}
                first={first}
                onLazyLoad={onLazyLoad}
                loading={loading}
                selection={selectedRows}
                onSelectionChange={onSelectionChange}
                sortField={sortField}
                sortOrder={sortOrder}
                onSort={onSort}
                filters={filters}
                onFilter={onFilter}
                {...otherProps}
            >
                {columnData.map((col) => (
                    <Column key={col.field} field={col.field} header={col.header} sortable filter />
                ))}
            </DataTable>
            <ScrollTop target="parent" threshold={100} />
        </div>
    );
});

export default TableInfiniteScroll;
