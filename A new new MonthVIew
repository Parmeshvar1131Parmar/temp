import React from 'react';
import { MonthWeekView } from './MonthWeekView';
import { Event } from '../types';

// Function to get the start of the month
const startOfMonth = (date: Date) => new Date(date.getFullYear(), date.getMonth(), 1);

// Function to get the end of the month
const endOfMonth = (date: Date) => new Date(date.getFullYear(), date.getMonth() + 1, 0);

// Function to get the start of a week for a given date
const startOfWeek = (date: Date) => {
  const day = date.getDay();
  const diff = date.getDate() - day + (day === 0 ? -6 : 1); // Adjust if Sunday
  return new Date(date.setDate(diff));
};

// Function to get the end of a week for a given date
const endOfWeek = (date: Date) => {
  const day = date.getDay();
  const diff = date.getDate() + (6 - day);
  return new Date(date.setDate(diff));
};

// Function to create an array of days in a given interval
const eachDayOfInterval = (start: Date, end: Date) => {
  const days: Date[] = [];
  let currentDate = start;

  while (currentDate <= end) {
    days.push(new Date(currentDate));
    currentDate.setDate(currentDate.getDate() + 1);
  }

  return days;
};

// Function to format date as string
const formatDate = (date: Date, format: string) => {
  const options: Intl.DateTimeFormatOptions = {
    day: 'numeric',
    month: 'short',
    year: 'numeric',
    weekday: 'short',
  };
  return new Intl.DateTimeFormat('en-US', options).format(date);
};

type MonthViewProps = {
  date: Date;
  events?: Event[];
};

export const MonthView: React.FC<MonthViewProps> = ({ date, events = [] }) => {
  const startOfMonthDate = startOfMonth(date);
  const endOfMonthDate = endOfMonth(date);

  const startOfFirstWeek = startOfWeek(startOfMonthDate);
  const endOfLastWeek = endOfWeek(endOfMonthDate);

  const days = eachDayOfInterval(startOfFirstWeek, endOfLastWeek);

  // Ensure we have exactly 42 days (6 weeks) displayed
  if (days.length < 42) {
    const additionalDaysNeeded = 42 - days.length;
    const endOfNextWeek = new Date(endOfLastWeek);
    for (let i = 1; i <= additionalDaysNeeded; i++) {
      endOfNextWeek.setDate(endOfNextWeek.getDate() + 1);
      days.push(new Date(endOfNextWeek));
    }
  }

  const weeks: Date[][] = [];
  for (let i = 0; i < days.length; i += 7) {
    weeks.push(days.slice(i, i + 7));
  }

  return (
    <section id="calendar-month-view" className="flex-1 flex flex-col">
      <div className="w-full flex">
        {weeks[0].map((day) => (
          <div
            key={day.toISOString()}
            className="flex-1 flex justify-center border-t border-l last:border-r"
          >
            <span className="mt-2 text-sm font-semibold text-gray-500">
              {formatDate(day, 'EEEEEE')}
            </span>
          </div>
        ))}
      </div>
      <div className="flex-1 flex flex-col">
        {weeks.map((week, index) => {
          const weekEndDate = week[week.length - 1];
          const weekStartDate = week[0];
          const weekKey =
            weekStartDate.toISOString() + '-' + weekEndDate.toISOString();
          const props = { week };

          return <MonthWeekView {...props} key={weekKey} />;
        })}
      </div>
    </section>
  );
};
