import React, { useState } from "react";
import { DayEvent } from "./day-event";
import { Modal } from "./modal";
import { EventForm } from "./event-form";
import { startOfDay, endOfDay, eachHourOfInterval, formatDate } from "../utils/date-utils";
import { Event } from "../types";

type DayViewProps = {
  date: Date;
  events?: Event[];
  onEventSave: (event: Event) => void;
};

export const DayView: React.FC<DayViewProps> = ({ date, events = [], onEventSave }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const [modalStartTime, setModalStartTime] = useState<Date | null>(null);

  const hours = eachHourOfInterval({
    start: startOfDay(date),
    end: endOfDay(date),
  });

  const handleEventClick = (event: Event) => {
    setSelectedEvent(event);
    setIsModalOpen(true);
  };

  const handleNewEventClick = (time: Date) => {
    setModalStartTime(time);
    setSelectedEvent(null);
    setIsModalOpen(true);
  };

  const handleSave = (event: Event) => {
    onEventSave(event);
    setIsModalOpen(false);
  };

  return (
    <section id="calendar-day-view" className="flex-1 h-full">
      <div className="border-b flex">
        <div className="w-24 h-14 flex justify-center items-center">
          <span className="text-xs">{formatDate(new Date(), "z")}</span>
        </div>
        <div className="flex flex-col flex-1 justify-center items-center border-l"></div>
      </div>
      <div className="flex-1 max-h-full overflow-y-scroll pb-28">
        <div className="relative">
          {hours.map((time, index) => (
            <div
              className="h-14 flex cursor-pointer"
              key={time.toISOString() + index}
              onClick={() => handleNewEventClick(time)}
            >
              <div className="h-full w-24 flex items-start justify-center">
                <time
                  className="text-xs -m-3 select-none"
                  dateTime={formatDate(time, "yyyy-MM-dd")}
                >
                  {index === 0 ? "" : formatDate(time, "h a")}
                </time>
              </div>
              <div className="flex-1 relative border-b border-l">
                {events
                  .filter(
                    (event) =>
                      event.start_date <= time &&
                      event.end_date >= time
                  )
                  .map((event, eventIndex) => (
                    <DayEvent
                      key={event.id + "-" + eventIndex}
                      day={date}
                      event={event}
                      index={eventIndex}
                      grouplength={events.length}
                      containerHeight={14 * hours.length}
                      onClick={() => handleEventClick(event)}
                    />
                  ))}
              </div>
            </div>
          ))}
        </div>
      </div>
      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
        <EventForm
          event={selectedEvent || {
            title: "",
            description: "",
            start_date: modalStartTime || new Date(),
            end_date: modalStartTime
              ? new Date(modalStartTime.getTime() + 60 * 60 * 1000)
              : new Date(),
          }}
          onSave={handleSave}
          onCancel={() => setIsModalOpen(false)}
        />
      </Modal>
    </section>
  );
};




import React from "react";
import { formatDate, differenceInMinutes, startOfDay } from "../utils/date-utils";
import { Event } from "../types";

const MINUTES_IN_DAY = 24 * 60;

type DayEventProps = {
  day: Date;
  event: Event;
  index: number;
  grouplength: number;
  containerHeight: number;
  onClick: () => void;
};

export const DayEvent: React.FC<DayEventProps> = ({
  day,
  event,
  index,
  grouplength,
  containerHeight,
  onClick,
}) => {
  const today = startOfDay(day);

  const eventDuration = differenceInMinutes(event.end_date, event.start_date);

  const generateBoxStyle = () => {
    const minutesPassed = differenceInMinutes(event.start_date, today);
    const percentage = minutesPassed / MINUTES_IN_DAY;

    const top = percentage * containerHeight;
    const height = (eventDuration / MINUTES_IN_DAY) * containerHeight;

    const isLast = index === grouplength - 1;
    let widthPercentage = grouplength === 1 ? 1 : (1 / grouplength) * 1.7;

    if (isLast) {
      widthPercentage = 1 / grouplength;
    }

    const styles = {
      top,
      height,
      padding: "2px 8px",
      zIndex: 100 + index,
      width: `calc((100% - 96px) * ${widthPercentage})`,
    };

    if (isLast) {
      return { ...styles, right: 0 };
    }

    return {
      ...styles,
      left: `calc(100px + 100% * ${(1 / grouplength) * index})`,
    };
  };

  return (
    <div
      style={generateBoxStyle()}
      className="bg-blue-400 border border-white rounded cursor-pointer absolute"
      onClick={onClick}
    >
      <h1 className="text-white text-xs">
        {`${event.title}, ${formatDate(event.start_date, "h:mm a")} - ${formatDate(event.end_date, "h:mm a")}`}
      </h1>
    </div>
  );
};
