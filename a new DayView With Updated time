import { useEffect, useState } from 'react';
import { Form, Formik, FormikValues } from 'formik';
import { Event } from '../types';
import { DayProgress } from '../DayProgress';
import Modal from '../EvenModal';
import InputField from '../../../components/Input/index';

import {
  eachHourOfInterval,
  endOfDay,
  formatDate,
  isToday,
  startOfDay,
} from '../DateFunctions';

export type DayViewProps = {
  date: Date;
  events?: Event[];
};

const DayView: React.FC<DayViewProps> = ({ date }) => {
  const [hours, setHours] = useState<Date[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedTimeSlot, setSelectedTimeSlot] = useState<Date | null>(null);
  const [ref, setRef] = useState<HTMLDivElement | null>(null);

  useEffect(() => {
    setHours(
      eachHourOfInterval({
        start: startOfDay(date),
        end: endOfDay(date),
      })
    );
  }, [date]);

  const handleClose = () => {
    setIsModalOpen(false);
    setSelectedTimeSlot(null);
  };

  const handleOpen = (timeSlot: Date) => {
    setSelectedTimeSlot(timeSlot);
    setIsModalOpen(true);
  };

  const onSubmit = async (values: FormikValues) => {
    try {
      console.log(values);
      setTimeout(() => {
        handleClose();
      }, 300);
    } catch (error) {
      console.error('Error creating event:', error);
    }
  };

  return (
    <>
      <section className="flex-1 h-full">
        <div className="flex-1 max-h-full">
          <div className="relative" ref={(ref) => setRef(ref)}>
            {hours.map((time, index) => (
              <div
                className="h-14 flex cursor-pointer"
                key={time.toISOString() + index}
                onClick={() => handleOpen(time)} // Open modal with selected time slot
              >
                <div className="h-full w-24 flex items-start justify-center">
                  <time
                    className="text-xs -m-3 select-none"
                    dateTime={formatDate(time, 'yyyy-MM-dd')}
                  >
                    {index === 0 ? '' : formatDate(time, 'h a')}
                  </time>
                </div>
                <div className="flex-1 relative border-b border-l" />
              </div>
            ))}

            {isDayToday && (
              <DayProgress
                containerHeight={ref?.offsetHeight || 1}
                classNames="left-[88px]"
              />
            )}
          </div>
        </div>
      </section>

      <Modal isOpen={isModalOpen} onClose={handleClose}>
        <div className="container mx-auto w-4/5 flex justify-center">
          <Formik
            enableReinitialize
            initialValues={{
              id: '',
              date: selectedTimeSlot ? formatDate(selectedTimeSlot, 'yyyy-MM-dd') : '',
              title: '',
              start_time: selectedTimeSlot || new Date(),
              end_time: '',
            }}
            onSubmit={(values) => onSubmit(values)}
          >
            {({ values }) => (
              <Form className="space-y-4">
                <InputField
                  name="Title"
                  type="text"
                  label="Event Title"
                  value={values.title}
                  isCompulsory={true}
                  showError={true}
                  className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 w-full"
                />

                <div className="flex space-x-4">
                  <InputField
                    name="Date"
                    type="date"
                    label="Date"
                    value={values.date}
                    isCompulsory={true}
                    showError={true}
                    className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 w-1/2"
                  />

                  <InputField
                    name="StartTime"
                    type="time"
                    label="Start Time"
                    value={formatDate(values.start_time, 'HH:mm')}
                    isCompulsory={true}
                    showError={true}
                    className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 w-1/2"
                  />
                </div>

                <InputField
                  name="EndTime"
                  type="time"
                  label="End Time"
                  value={values.end_time}
                  isCompulsory={true}
                  showError={true}
                  className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 w-full"
                />

                <div className="flex justify-end space-x-2">
                  <button
                    type="button"
                    className="text-gray-600 hover:text-gray-800"
                    onClick={handleClose}
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5"
                  >
                    Save
                  </button>
                </div>

                <div className="mt-4">
                  <a href="#more-options" className="text-blue-600 hover:underline">
                    More options
                  </a>
                </div>
              </Form>
            )}
          </Formik>
        </div>
      </Modal>
    </>
  );
};

export default DayView;
