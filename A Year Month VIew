import React, { useState } from 'react';
import GenericModal from '../GenericModal';

// Function to get the start of a month
const startOfMonth = (date: Date) => new Date(date.getFullYear(), date.getMonth(), 1);

// Function to get the end of a month
const endOfMonth = (date: Date) => new Date(date.getFullYear(), date.getMonth() + 1, 0);

// Function to get the start of a week for a given date
const startOfWeek = (date: Date) => {
  const day = date.getDay();
  const diff = date.getDate() - day + (day === 0 ? -6 : 1); // Adjust if Sunday
  return new Date(date.setDate(diff));
};

// Function to get the end of a week for a given date
const endOfWeek = (date: Date) => {
  const day = date.getDay();
  const diff = date.getDate() + (6 - day);
  return new Date(date.setDate(diff));
};

// Function to create an array of days in a given interval
const eachDayOfInterval = (start: Date, end: Date) => {
  const days: Date[] = [];
  let currentDate = start;

  while (currentDate <= end) {
    days.push(new Date(currentDate));
    currentDate.setDate(currentDate.getDate() + 1);
  }

  return days;
};

// Function to format date as string
const formatDate = (date: Date, format: string) => {
  const options: Intl.DateTimeFormatOptions = {
    day: 'numeric',
    month: 'short',
    year: 'numeric',
    weekday: 'short',
  };
  return new Intl.DateTimeFormat('en-US', options).format(date);
};

type Event = {
  id: string;
  title: string;
  date: string;
};

type MonthViewProps = {
  date: Date;
  events?: Event[];
};

export const MonthView: React.FC<MonthViewProps> = ({ date, events = [] }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);

  const startOfMonthDate = startOfMonth(date);
  const endOfMonthDate = endOfMonth(date);

  const days = eachDayOfInterval(startOfWeek(startOfMonthDate), endOfWeek(endOfMonthDate));

  const weeks: Date[][] = [];
  for (let i = 0; i < days.length; i += 7) {
    weeks.push(days.slice(i, i + 7));
  }

  const handleEventClick = (event: Event) => {
    setSelectedEvent(event);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedEvent(null);
  };

  const handleSubmit = (values: Event) => {
    console.log('Submitted event:', values);
    // Handle form submission here
    handleCloseModal();
  };

  return (
    <section id="calendar-month-view" className="flex-1 flex flex-col p-4">
      <div className="grid grid-cols-7 gap-4">
        {weeks.map((week, weekIndex) => (
          <div key={weekIndex} className="flex flex-col">
            {week.map((day) => {
              const dayEvents = events.filter(event => new Date(event.date).toDateString() === day.toDateString());

              return (
                <div
                  key={day.toISOString()}
                  className="border p-2"
                  aria-label={`Events on ${formatDate(day, 'MMMM d')}`}
                >
                  <h3 className="text-center font-semibold text-lg">{formatDate(day, 'd')}</h3>
                  <div>
                    {dayEvents.map((event) => (
                      <div
                        key={event.id}
                        className="cursor-pointer"
                        onClick={() => handleEventClick(event)}
                      >
                        <span>{event.title}</span>
                      </div>
                    ))}
                  </div>
                </div>
              );
            })}
          </div>
        ))}
      </div>

      {selectedEvent && (
        <GenericModal
          isOpen={isModalOpen}
          onClose={handleCloseModal}
          onSubmit={handleSubmit}
          initialValues={selectedEvent}
        />
      )}
    </section>
  );
};
