import React, { useState } from 'react';
import { Form, Formik, FieldArray, Field } from 'formik';
import axios from 'axios';
import { MovieDataSchema } from 'components/validationSchema';
import Basic from './Step.tsx/Basic';
import Actor from './Step.tsx/Actor';
import Director from './Step.tsx/Director';
import Genre from './Step.tsx/Genre';

export type MovieValues = {
  title: string;
  release_year: number;
  rating: number;
  plot: string;
  duration: number;
  genres: { value: string; label: string }[];
  actorName: string;
  actorNationality: string;
  actorBirthDate: number | string;
  actorBio: string;
  directorName: string;
  directorNationality: string;
  directorBirthDate: number | string;
  directorBio: string;
  images: File[];
};

const MovieForm = () => {
  const [step, setStep] = useState(1);
  const [imagePreviews, setImagePreviews] = useState<string[]>([]);

  const initialValues: MovieValues = {
    title: '',
    release_year: new Date().getFullYear(),
    rating: 0,
    plot: '',
    duration: 0,
    genres: [],
    actorName: '',
    actorNationality: '',
    actorBirthDate: '',
    actorBio: '',
    directorName: '',
    directorNationality: '',
    directorBirthDate: '',
    directorBio: '',
    images: []
  };

  const onSubmit = async (values: MovieValues) => {
    if (step !== 5) {
      setStep(step + 1);
    } else {
      const formData = new FormData();
      formData.append('Movie', JSON.stringify({
        title: values.title,
        release_year: values.release_year,
        rating: values.rating,
        duration: values.duration,
        plot: values.plot
      }));
      formData.append('Genre', JSON.stringify(values.genres.map(g => g.value)));
      formData.append('Actor', JSON.stringify({
        name: values.actorName,
        nationality: values.actorNationality,
        birth_date: values.actorBirthDate,
        bio: values.actorBio
      }));
      formData.append('Director', JSON.stringify({
        name: values.directorName,
        nationality: values.directorNationality,
        birth_date: values.directorBirthDate,
        bio: values.directorBio
      }));
      values.images.forEach(file => formData.append('images', file));

      try {
        const { data } = await axios.post('/movies', formData, {
          headers: { 'Content-Type': 'multipart/form-data' }
        });
        alert('Movie created successfully');
        console.log(data);
      } catch (error) {
        console.error('Error creating movie:', error);
      }
    }
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    setImagePreviews(files.map(file => URL.createObjectURL(file)));
  };

  return (
    <>
      <h1 className="text-white text-3xl m-2 text-center">Add Movie</h1>
      <div className="container mx-auto w-4/5 flex justify-center h-[800px]">
        <Formik
          initialValues={initialValues}
          validationSchema={MovieDataSchema()[step - 1]}
          onSubmit={(values) => onSubmit(values)}
        >
          {() => (
            <Form>
              {step === 1 && (
                <Basic />
              )}
              {step === 2 && <Genre />}
              {step === 3 && (
                <Actor />
              )}
              {step === 4 && (
                <Director />
              )}
              {step === 5 && (
                <>
                  <h2 className="text-white text-xl m-2 text-center">
                    Step 5: Upload Images
                  </h2>
                  <input
                    type="file"
                    multiple
                    onChange={handleFileChange}
                    className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5"
                  />
                  <div className="mt-4">
                    {imagePreviews.map((preview, index) => (
                      <img
                        key={index}
                        src={preview}
                        alt={`Preview ${index}`}
                        className="w-32 h-32 object-cover mr-2 mb-2"
                      />
                    ))}
                  </div>
                </>
              )}
              {step !== 1 && (
                <button
                  type="button"
                  className="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2"
                  onClick={() => setStep(step - 1)}
                >
                  Back
                </button>
              )}
              <button
                type="submit"
                className="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2"
              >
                {step !== 5 ? 'Next' : 'Submit'}
              </button>
            </Form>
          )}
        </Formik>
      </div>
    </>
  );
};

export default MovieForm;
