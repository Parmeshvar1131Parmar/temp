import React, { useState, useEffect } from 'react';
import { Form, Formik, FormikValues } from 'formik';
import { useAxiosPost } from 'hook/useAxios';
import { MovieDataSchema } from 'components/validationSchema';
import Basic from './Step.tsx/Basic';
import Actor from './Step.tsx/Actor';
import Director from './Step.tsx/Director';
import Genre from './Step.tsx/Genre';

export type MovieValues = {
  title: string;
  release_year: number;
  rating: number;
  plot: string;
  duration: number;
  genres: { value: string; label: string }[];
  actorName: string;
  actorNationality: string;
  actorBirthDate: number | string;
  actorBio: string;
  directorName: string;
  directorNationality: string;
  directorBirthDate: number | string;
  directorBio: string;
  images: File[];
};

const MovieForm = () => {
  const [step, setStep] = useState(1);
  const [MoviePostApi] = useAxiosPost();
  const [imagePreviews, setImagePreviews] = useState<string[]>([]);

  const initialValues: MovieValues = {
    title: '',
    release_year: new Date().getFullYear(),
    rating: 0,
    plot: '',
    duration: 0,
    genres: [],
    actorName: '',
    actorNationality: '',
    actorBirthDate: '',
    actorBio: '',
    directorName: '',
    directorNationality: '',
    directorBirthDate: '',
    directorBio: '',
    images: [],
  };

  const onSubmit = async (values: FormikValues, { setSubmitting }) => {
    if (step !== 5) {
      setStep(step + 1);
      setSubmitting(false);
    } else {
      const formData = new FormData();
      formData.append('title', values.title);
      formData.append('release_year', values.release_year.toString());
      formData.append('rating', values.rating.toString());
      formData.append('plot', values.plot);
      formData.append('duration', values.duration.toString());
      formData.append('genres', JSON.stringify(values.genres.map((genre: { value: string; label: string }) => genre.value)));
      formData.append('actor', JSON.stringify({
        name: values.actorName,
        nationality: values.actorNationality,
        birth_date: values.actorBirthDate,
        bio: values.actorBio,
      }));
      formData.append('director', JSON.stringify({
        name: values.directorName,
        nationality: values.directorNationality,
        birth_date: values.directorBirthDate,
        bio: values.directorBio,
      }));
      values.images.forEach((image: File) => {
        formData.append('images', image);
      });

      try {
        const response = await MoviePostApi('/movies', formData, {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });
        if (response.error) {
          console.error('Error creating movie:', response.error);
        } else {
          alert('Movie created successfully');
        }
      } catch (error) {
        console.error('Error creating movie:', error);
      } finally {
        setSubmitting(false);
      }
    }
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>, setFieldValue: any) => {
    const files = Array.from(event.target.files || []);
    setFieldValue('images', files);

    // Generate image previews
    const filePreviews = files.map(file => URL.createObjectURL(file));
    setImagePreviews(filePreviews);
  };

  return (
    <>
      <h1 className="text-white text-3xl m-2 text-center">Add Movie</h1>
      <div className="container mx-auto w-4/5 flex justify-center h-[800px]">
        <Formik
          initialValues={initialValues}
          validationSchema={MovieDataSchema[step - 1]}
          onSubmit={onSubmit}
        >
          {({ values, setFieldValue, isSubmitting }) => (
            <Form>
              {step === 1 && (
                <Basic
                  title={values.title}
                  release_year={values.release_year}
                  rating={values.rating}
                  duration={values.duration}
                />
              )}
              {step === 2 && <Genre />}
              {step === 3 && (
                <Actor
                  actorName={values.actorName}
                  actorNationality={values.actorNationality}
                  actorBirthDate={values.actorBirthDate}
                  actorBio={values.actorBio}
                />
              )}
              {step === 4 && (
                <Director
                  name={values.directorName}
                  nationality={values.directorNationality}
                  birth_date={values.directorBirthDate}
                  bio={values.directorBio}
                />
              )}
              {step === 5 && (
                <>
                  <h2 className="text-white text-xl m-2 text-center">Step 5: Upload Images</h2>
                  <input
                    type="file"
                    className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                    multiple
                    onChange={(event) => handleFileChange(event, setFieldValue)}
                  />
                  <div className="image-previews mt-4">
                    {imagePreviews.map((preview, index) => (
                      <img
                        key={index}
                        src={preview}
                        alt={`Preview ${index}`}
                        className="w-32 h-32 object-cover m-2"
                      />
                    ))}
                  </div>
                </>
              )}
              {step !== 1 && (
                <button
                  type="button"
                  className="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700"
                  onClick={() => setStep(step - 1)}
                >
                  Back
                </button>
              )}
              <button
                type="submit"
                className="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700"
                disabled={isSubmitting}
              >
                {step !== 5 ? 'Next' : 'Submit'}
              </button>
            </Form>
          )}
        </Formik>
      </div>
    </>
  );
};

export default MovieForm;
